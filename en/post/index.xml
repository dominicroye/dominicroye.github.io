<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Dominic Royé</title>
    <link>/en/post/</link>
    <description>Recent content in Blog on Dominic Royé</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2018-2019 Dominic Royé. All rights reserved.</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/en/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tidy correlation tests in R</title>
      <link>/en/2019/tidy-correlation-tests-in-r/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/tidy-correlation-tests-in-r/</guid>
      <description>When we try to estimate the correlation coefficient between multiple variables, the task is more complicated in order to obtain a simple and tidy result. A simple solution is to use the tidy() function from the {broom} package. In this post we are going to estimate the correlation coefficients between the annual precipitation of several Spanish cities and climate teleconnections indices: download. The data of the teleconnections are preprocessed, but can be downloaded directly from crudata.</description>
    </item>
    
    <item>
      <title>Import Excel sheets with R</title>
      <link>/en/2019/import-excel-sheets-with-r/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/import-excel-sheets-with-r/</guid>
      <description>We usually work with different data sources, and sometimes we can find tables distributed over several Excel sheets. In this post we are going to import the average daily temperature of Madrid and Berlin which is found in two Excel files with sheets for each year between 2000 and 2005: download.
PackagesIn this post we will use the following packages:
PackagesDescriptiontidyverseCollection of packages (visualization, manipulation): ggplot2, dplyr, purrr, etc.</description>
    </item>
    
    <item>
      <title>Calculating the distance to the sea in R</title>
      <link>/en/2019/calculating-the-distance-to-the-sea-in-r/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/calculating-the-distance-to-the-sea-in-r/</guid>
      <description>The distance to the sea is a fundamental variable in geography, especially relevant when it comes to modeling. For example, in interpolations of air temperature, the distance to the sea is usually used as a predictor variable, since there is a casual relationship between the two that explains the spatial variation. How can we estimate the (shortest) distance to the coast in R?
PackagesIn this post we will use the following libraries:</description>
    </item>
    
    <item>
      <title>How to create &#39;Warming Stripes&#39; in R</title>
      <link>/en/2018/how-to-create-warming-stripes-in-r/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/en/2018/how-to-create-warming-stripes-in-r/</guid>
      <description>This year, the so-called warming stripes, which were created by the scientist Ed Hawkins of the University of Reading, became very famous all over the world. These graphs represent and communicate climate change in a very illustrative and effective way.
Visualising global temperature change since records began in 1850. Versions for USA, central England &amp;amp; Toronto available too: https://t.co/H5Hv9YgZ7v pic.twitter.com/YMzdySrr3A
&amp;mdash; Ed Hawkins #ShowYourStripes (@ed_hawkins) May 23, 2018  From his idea, I created strips for examples of Spain, like the next one in Madrid.</description>
    </item>
    
    <item>
      <title>Accessing OpenStreetMap data with R</title>
      <link>/en/2018/accessing-openstreetmap-data-with-r/</link>
      <pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/en/2018/accessing-openstreetmap-data-with-r/</guid>
      <description>The database of Open Street MapsRecently I created a map of the distribution of gas stations and electric charging stations in Europe.
Population density through the number of gas stations in Europe. #dataviz @AGE_Oficial @mipazos @simongerman600 @openstreetmap pic.twitter.com/eIUx2yn7ej
&amp;mdash; Dominic Royé (@dr_xeo) February 25, 2018  How can you obtain this data?
Well, in this case I used points of interest (POIs) from the database of Open Street Maps (OSM).</description>
    </item>
    
    <item>
      <title>Access to climate reanalysis data from R</title>
      <link>/en/2018/access-to-climate-reanalysis-data-from-r/</link>
      <pubDate>Sat, 15 Sep 2018 10:59:44 +0100</pubDate>
      
      <guid>/en/2018/access-to-climate-reanalysis-data-from-r/</guid>
      <description>1 Introduction2 NCEP2.1 Packages2.2 Data download2.3 Monthly average2.4 Visualization3 ERA-Interim3.1 Installation3.2 Connection and download with the ECMWF API3.3 Processing ncdf4 Update for accessing ERA-5A friend advised me to introduce R levels as categories. An idea that I now add to each blog post. There are three levels: elementary, intermediate, and advanced. I hope it will help the reader and the R user.</description>
    </item>
    
    <item>
      <title>the pie chart</title>
      <link>/en/2018/the-pie-chart/</link>
      <pubDate>Wed, 22 Aug 2018 11:23:32 +0100</pubDate>
      
      <guid>/en/2018/the-pie-chart/</guid>
      <description>Welcome to my blog! I am Dominic Royé, researcher and lecturer of physical geography at the University of Santiago de Compostela. One of my passions is R programming to visualize and analyze any type of data. Hence, my idea of this blog has its origin in my datavis publications I have been cooking in the last year on Twitter on different topics describing the world. In addition, I would like to take advantage of the blog and publish short introductions and explanation on data visualization, management and manipulation in R.</description>
    </item>
    
  </channel>
</rss>